einfügen
  move.kdp
*einfügen

methode toAlu
  wiederhole solange nicht istNorden
    tr
  *wiederhole
  wiederhole solange nicht istWand
    f
  *wiederhole
  tr
  wiederhole solange nicht istWand
    f
  *wiederhole
  tr
*methode

methode toInput1
  toAlu
*methode

methode toInput2
  toAlu
  f
*methode

methode toCarry
  toAlu
  schritt(2)
*methode

methode toResult
  toAlu
  schritt(3)
*methode

methode toRegister
  toAlu
  schritt(4)
*methode

methode clear
  tr
  wiederhole 15 mal
    markeLöschen
    f
  *wiederhole
  t2
  schritt(15)
  tr
*methode

methode setCarry
  toCarry
  markeSetzen
*methode
methode clearCarry
  toCarry
  markeLöschen
*methode


methode carryTo1
  r;markeSetzen;l
*methode
methode carryTo0
  r;markeLöschen;l
*methode
methode resultTo1
  f;markeSetzen;b
*methode
methode resultTo0
  f;markeLöschen;b
*methode

methode addBit
  wenn istMarke dann
    f
    wenn istMarke dann
      f
      wenn istMarke dann
        carryTo1
        resultTo1
      sonst
        carryTo1
        resultTo0
      *wenn
    sonst
      f
      wenn istMarke dann
        carryTo1
        resultTo0
      sonst
        carryTo0
        resultTo1
      *wenn
    *wenn
  sonst
    f
    wenn istMarke dann
      f
      wenn istMarke dann
        carryTo1
        resultTo0
      sonst
        carryTo0
        resultTo1
      *wenn
    sonst
      f
      wenn istMarke dann
        carryTo0
        resultTo1
      sonst
        carryTo0
        resultTo0
      *wenn
    *wenn
  *wenn
*methode

methode add
  toAlu
  wiederhole 15 mal
    addBit
    tr;f;tr
    schritt(2)
    t2
  *wiederhole
*methode

methode resultToInput1
  toResult
  wiederhole 15 mal
    wenn istMarke dann
      t2;schritt(3)
      markeSetzen
    sonst
      t2;schritt(3)
      markeLöschen
    *wenn
    tl;f;tl
    schritt(3)
  *wiederhole
*methode

methode resultToRegister
  toResult
  wiederhole 15 mal
    wenn istMarke dann
      f
      markeSetzen
    sonst
      f
      markeLöschen
    *wenn
    tr;f;tr;f;t2
  *wiederhole
*methode

methode input1ToRegister
  toInput1
  wiederhole 15 mal
    wenn istMarke dann
      schritt(4)
      markeSetzen
    sonst
      schritt(4)
      markeLöschen
    *wenn
    tr;f;tr;schritt(4);t2
  *wiederhole
*methode

methode input2ToRegister
  toInput2
  wiederhole 15 mal
    wenn istMarke dann
      schritt(3)
      markeSetzen
    sonst
      schritt(3)
      markeLöschen
    *wenn
    tr;f;tr;schritt(3);t2
  *wiederhole
*methode

methode registerToInput1
  toRegister;t2
  wiederhole 15 mal
    wenn istMarke dann
      schritt(4)
      markeSetzen
    sonst
      schritt(4)
      markeLöschen
    *wenn
    tl;f;tl;schritt(4);t2
  *wiederhole
*methode

methode registerToInput2
  toRegister;t2
  wiederhole 15 mal
    wenn istMarke dann
      schritt(3)
      markeSetzen
    sonst
      schritt(3)
      markeLöschen
    *wenn
    tl;f;tl;schritt(3);t2
  *wiederhole
*methode

methode invertInput2
  toInput2
  tr
  wiederhole 15 mal
    wenn istMarke dann
      markeLöschen
    sonst
      markeSetzen
    *wenn
    f
  *wiederhole
*methode

methode sub
  invertInput2
  setCarry
  add
*methode

methode mul
  input1ToRegister
  toInput1
  clear
  toRegister
  tr
  wiederhole solange istWesten
    wiederhole solange istWesten
      wenn istZiegel(blau) dann
        rechtsDrehen
      sonst
        wenn istMarke dann
          markeLöschen
          rechtsDrehen;rechtsDrehen
          wiederhole solange nicht istWand
            schritt
            markeSetzen
          *wiederhole
        sonst
          schritt
        *wenn
      *wenn
    *wiederhole
    wenn istOsten dann
      add
      resultToInput1
      toRegister
      tr
    *wenn
  *wiederhole
*methode

methode div
  invertInput2
  setCarry
  toRegister
  clear

  wenn istNorden dann
    tr
  *wenn

  wiederhole solange nicht istNorden
    add
    resultToInput1
    toResult
    tr;schritt(14)

    wenn istMarke dann        { check sign bit }
      tr
    sonst
      toRegister;tr
      wiederhole solange istWesten
        wenn istMarke dann
          markeLöschen
          f
        sonst
          markeSetzen
          t2
        *wenn
      *wiederhole
    *wenn
  *wiederhole

  { calculate remainder }
  invertInput2
  clearCarry
  add

  { move results }
  toInput1;clear
  registerToInput2
  resultToRegister
  add
*methode
